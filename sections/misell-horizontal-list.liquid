<section class="misell-horizontal-list-section">
  <div class="section-header">
    {% if section.settings.title != blank %}
      <h2 class="section-title">{{ section.settings.title }}</h2>
    {% endif %}
    <div class="header-right">
      {% if section.settings.collection != blank %}
        <a href="{{ collections[section.settings.collection].url }}" class="view-more-link top-view-more">
          もっと見る <span class="arrow-circle arrow-circle1"><span>&gt;</span></span>
        </a>
      {% endif %}
      <div class="scroll-buttons">
        <button class="scroll-button scroll-prev" aria-label="前へ">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m12 19-7-7 7-7"></path>
            <path d="M19 12H5"></path>
          </svg>
        </button>
        <button class="scroll-button scroll-next" aria-label="次へ">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M5 12h14"></path>
            <path d="m12 5 7 7-7 7"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  {% assign my_collection = collections[section.settings.collection] %}
  {% if my_collection and my_collection.products.size > 0 %}
    <div class="outer-container">
      <div class="product-list-container">
        <div class="product-list">
          {% for product in my_collection.products limit: section.settings.product_limit %}
            <div class="horizontal-list-item">
              {% # 既存のproduct-collection.liquidを含める %}
              {% include 'product-collection' %}
            </div>
          {% endfor %}
        </div>

        {% if section.settings.collection != blank %}
          <div class="bottom-view-more-container">
            <a href="{{ collections[section.settings.collection].url }}" class="bottom-view-more-link">
              <span class="bottom-view-more-link-text">もっと見る</span> 
              <div class="bottom-view-more-link-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right size-6 text-ui-fg-interactive"><path d="m9 18 6-6-6-6"></path></svg>
              </div>
            </a>
          </div>
        {% endif %}
      </div>
    </div>
  {% else %}
    <p>表示する商品がありません。</p>
  {% endif %}
</section>

{% schema %}
{
  "name": "横スクロール商品リスト",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "セクションタイトル",
      "default": "[最新弾] テラスタルフェスex"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "表示するコレクション"
    },
    {
      "type": "number",
      "id": "product_limit",
      "label": "表示する商品の数",
      "default": 18
    }
  ],
  "presets": [
    {
      "name": "横スクロール商品リスト",
      "category": "コレクション"
    }
  ]
}
{% endschema %}

{% stylesheet %}
  .misell-horizontal-list-section {
    background: #fff;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    max-width: 1200px;
    margin: 0 auto 15px auto;
  }

  .section-title {
    display: inline-block;
    font-size: 20px;
    font-weight: bold;
    margin: 30px 15px 15px;
  }
  @media screen and (max-width: 400px) {
    .section-title {
      max-width: 260px;
    }
  }
  .view-more-link {
    font-size: 14px;
    color: #000;
    text-decoration: none;
    position: absolute;
    right: 8px;
    top: 40px;
  }

  .outer-container, .section-header {
    max-width: 756px;
    margin: 0 auto;
    position: relative;
  }

  @media screen and (min-width: 768px) {
    .outer-container, .section-header {
      max-width: 1200px;
    }
  }

  .misell-horizontal-list-section .product-list-container {
    position: relative;
    overflow-x: auto;
    overflow-y: hidden;
    -webkit-overflow-scrolling: touch;
    touch-action: pan-x;
    padding-bottom: 40px;
    display: flex;
    align-items: center;
    justify-content: left;
    flex-direction: row;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    cursor: grab;
    pointer-events: none;
    /* スクロールバーを非表示にする */
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
    &::-webkit-scrollbar {
      display: none; /* Chrome, Safari, Opera */
    }
  }

  .misell-horizontal-list-section .product-list-container > * {
    pointer-events: auto;
  }

  .misell-horizontal-list-section .product-list {
    display: grid;
    grid-template-columns: repeat(9, 1fr);
    grid-template-rows: repeat(2, auto);
    column-gap: 8px;
    padding-left: 16px;
    user-drag: none;
    -webkit-user-drag: none;
    touch-action: pan-x;
  }

  .horizontal-list-item {
    width: 107px; /* スマホ用デフォルトサイズ */
  }

  @media screen and (min-width: 768px) {
    .horizontal-list-item {
      width: 178px; /* PC用サイズ */
    }
  }

  .bottom-view-more-link {
    font-size: 14px;
    color: #3b82f6;
    text-decoration: none;
    font-weight: 400;
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    transition: transform 0.3s ease;
  }
  .bottom-view-more-link-text{
    color: #3b82f6;
    white-space: nowrap;
  }
  div.misell-horizontal-list-section a.view-more-link,
  .bottom-view-more-container > a.bottom-view-more-link {
    color: #9ca3af;
    transition: transform 0.3s ease;
    transform: translate(-2px, -1px);
  }
  div.misell-horizontal-list-section a.view-more-link:hover,
  .bottom-view-more-container > a.bottom-view-more-link:hover {
    transform: translate(0px, -1px);
  }
  .bottom-view-more-link-btn{
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background-color: #c6e6ff;
    color: #3b82f6;
    transform: translateY(-25px);
  }
  .bottom-view-more-link span{
    transform: translateY(25px);
  }

  .misell-horizontal-list-section .arrow-circle {
    font-size: 14px;
    width: 16px;
    height: 16px;
    color: #9ca3af;
    display: inline-flex;
    text-align: center;
    align-items: center;
    justify-content: center;
    transform: rotate(-90deg);
    line-height: 1;
    padding-bottom: 1px;
  }

  .misell-horizontal-list-section .arrow-circle1 span{
    transform: translate(1px, -1px);
  }
  @media screen and (min-width: 768px) {
    .misell-horizontal-list-section .arrow-circle1 span{
      display: none;
    }
    .misell-horizontal-list-section .arrow-circle {
      display: none;
    }
  }

  /* スクロール時のホバーエフクト */
  .misell-horizontal-list-section .scroll-hover-indicator {
    position: fixed;
    width: 40px;
    height: 40px;
    background: rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    pointer-events: none;
    display: none;
    z-index: 1000;
  }

  /* 上部のもっと見るリンクのスタイル */
  .misell-horizontal-list-section .top-view-more {
    display: flex;
    align-items: center;
    gap: 4px;
    color: #3b82f6;
  }

  /* 上部のもっと見るの矢印は回転させない */
  .misell-horizontal-list-section .top-view-more .arrow-circle {
    transform: none;
    line-height: 1;
    padding-bottom: 1px;
  }
  /* 左右の矢印ボタン（PC時のみ表示） */
  .misell-horizontal-list-section .scroll-buttons {
    display: none;
  }

  @media screen and (min-width: 768px) {
    .misell-horizontal-list-section .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 16px;
    }
    
    .misell-horizontal-list-section .header-right {
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .misell-horizontal-list-section .view-more-link {
      position: static;
      font-size: 14px;
      font-weight: bold;
      color: #3b82f6;
    }

    .misell-horizontal-list-section .scroll-buttons {
      display: flex;
      gap: 8px;
      margin-left: 8px;
    }
    
    .misell-horizontal-list-section .scroll-button {
      width: 32px;
      height: 32px;
      border: 1px solid #9ca3af;
      border-radius: 50%;
      background: white;
      color: #9ca3af;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      transform: translateY(-1px);
    }
    
    .misell-horizontal-list-section .scroll-button:hover {
      background: #f3f4f6;
      color: white;
    }
    
    .misell-horizontal-list-section .scroll-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .misell-horizontal-list-section .scroll-button span {
      display: inline-block;
    }

    .misell-horizontal-list-section .scroll-button svg {
      width: 16px;
      height: 16px;
    }
  }
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function () {
  const container = document.querySelector('.product-list-container');

  // スクロールホバーインジケーター
  const indicator = document.createElement('div');
  indicator.className = 'scroll-hover-indicator';
  document.body.appendChild(indicator);

  let isScrolling = false, startX, scrollLeft, isDragging = false, startTime, lastScrollTime = 0;
  const SCROLL_THROTTLE = 16; // 60FPS

  // マウスダウンイベント
  container.addEventListener('mousedown', (e) => {
    if (e.target.closest('.cart-button')) return;
    e.preventDefault();
    document.getSelection().removeAllRanges();
    startTime = Date.now();
    isScrolling = true;
    isDragging = false;
    container.style.cursor = 'grabbing';
    startX = e.pageX - container.offsetLeft;
    scrollLeft = container.scrollLeft;
  });

  // マウスムーブイベント
  container.addEventListener('mousemove', (e) => {
    if (!isScrolling) return;
    const currentTime = Date.now();
    if (currentTime - lastScrollTime < SCROLL_THROTTLE) return;
    e.preventDefault();
    isDragging = true;
    const x = e.pageX - container.offsetLeft;
    const walk = (x - startX) * 1.2; // よりスムーズな速度
    container.scrollLeft = scrollLeft - walk;
    lastScrollTime = currentTime;
  });

  // マウスアップイベント
  container.addEventListener('mouseup', (e) => {
    const timeElapsed = Date.now() - startTime;
    if (!isDragging && timeElapsed < 200) {
      const link = e.target.closest('a');
      if (link && !e.target.closest('.cart-button')) {
        window.location.href = link.href;
      }
    }
    isScrolling = false;
    container.style.cursor = 'grab';
  });

  // マウスリーブイベント
  container.addEventListener('mouseleave', () => {
    isScrolling = false;
    container.style.cursor = 'grab';
    indicator.style.display = 'none';
  });

  // タッチイベント
  container.addEventListener('touchstart', (e) => {
    if (e.target.closest('.cart-button')) return;
    document.getSelection().removeAllRanges();
    startX = e.touches[0].pageX - container.offsetLeft;
    scrollLeft = container.scrollLeft;
  }, { passive: false });

  container.addEventListener('touchmove', (e) => {
    e.preventDefault();
    const x = e.touches[0].pageX - container.offsetLeft;
    const walk = (x - startX) * 2;
    container.scrollLeft = scrollLeft - walk;
  }, { passive: false });

  container.addEventListener('touchend', (e) => {
    const timeElapsed = Date.now() - startTime;
    if (!isDragging && timeElapsed < 200) {
      const target = e.target;
      if (target.closest('.cart-button') || target.closest('a')) {
        e.preventDefault();
        target.click();
      }
    }
  });

  // 1列の幅を計算する関数
  function getColumnWidth() {
    const productItem = document.querySelector('.horizontal-list-item'); // 修正
    return productItem ? productItem.offsetWidth + 8 : 0; // 8pxはgrid-gapの値
  }

  // スクロールボタンの制御
  function updateScrollButtons() {
    const prevButton = document.querySelector('.scroll-prev');
    const nextButton = document.querySelector('.scroll-next');
    if (prevButton && nextButton) {
      prevButton.disabled = container.scrollLeft <= 0;
      nextButton.disabled = container.scrollLeft >= (container.scrollWidth - container.clientWidth);
    }
  }

  // 1列分スクロールする関数
  function scrollOneColumn(direction) {
    const columnWidth = getColumnWidth();
    container.scrollTo({
      left: container.scrollLeft + (columnWidth * direction),
      behavior: 'smooth'
    });
  }

  // スクロールボタンのイベントリスナー
  document.querySelector('.scroll-prev')?.addEventListener('click', () => scrollOneColumn(-1));
  document.querySelector('.scroll-next')?.addEventListener('click', () => scrollOneColumn(1));

  // スクロール時にボタンの状態を更新
  container.addEventListener('scroll', updateScrollButtons);
  window.addEventListener('resize', updateScrollButtons);

  // 初期化時にボタンの状態を設定
  updateScrollButtons();
});
{% endjavascript %}